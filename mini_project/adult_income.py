# -*- coding: utf-8 -*-
"""adult_income

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zEH4KTuqAfNkXyRjSkmG57-YaMxhqe19
"""

# import library yang dibutuhkan
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

#input data dari csv
data= pd.read_csv("sample_data/adult.csv")
df= pd.DataFrame(data)

# cek 5 data pertama
data.head()

# liat informasi seperti jumlah kolom, baris, tipe data dll
data.info()

# mengubagah variabel categorical menajadi variabel quantitative
print(set(data['occupation']))
data['occupation'] = data['occupation'].map({'?': 0, 'Farming-fishing': 1, 'Tech-support': 2, 
                                                       'Adm-clerical': 3, 'Handlers-cleaners': 4, 'Prof-specialty': 5,
                                                       'Machine-op-inspct': 6, 'Exec-managerial': 7, 
                                                       'Priv-house-serv': 8, 'Craft-repair': 9, 'Sales': 10, 
                                                       'Transport-moving': 11, 'Armed-Forces': 12, 'Other-service': 13, 
                                                       'Protective-serv': 14}).astype(int)

# mengubah income menjadi 2 bagian yaitu yang gajinya diatas 50k dollar dan di bawah 50k dollar
data['income'] = data['income'].map({'<=50K': 0, '>50K': 1}).astype(int)

# mengubah data sex menjadi 0 untuk laki-laki dan 1 untuk wanita
data['sex'] = data['sex'].map({'Male': 0, 'Female': 1}).astype(int)

# data['race'] = data['race'].map({'Black': 0, 'Asian-Pac-Islander': 1, 'Other': 2, 'White': 3, 
#                                              'Amer-Indian-Eskimo': 4}).astype(int)

# data['marital.status'] = data['marital.status'].map({'Married-spouse-absent': 0, 'Widowed': 1, 
#                                                              'Married-civ-spouse': 2, 'Separated': 3, 'Divorced': 4, 
#                                                              'Never-married': 5, 'Married-AF-spouse': 6}).astype(int)

# mengubah nilai null menajadi 0
df.occupation.replace(0, np.nan, inplace=True)

# melihat berapa banyak yang hilang (yaitu 1843 data)
print(df.shape)
df=df.dropna()
print(df.shape)

# melihat kembali 5 data awal
df.head(10)

# melihat korelasi dari masing-masing feature / kolom
hmap = df.corr()
plt.subplots(figsize=(12, 9))
sns.heatmap(hmap, vmax=.8,annot=True,cmap="BrBG", square=True);

#KNN
from sklearn.model_selection import train_test_split
from sklearn import metrics

# mengambil data education number, age, dan hourse per week saja
X= df[['education.num','age','hours.per.week']].values
y= df[['income']].values

from sklearn.neighbors import KNeighborsClassifier

# memisahkan data test dan train menjadi 30% data test
X_train, X_test, y_train, y_test = train_test_split(X ,y, test_size=0.3, random_state=21, stratify=y)

# membuat model dan melatih model
model = KNeighborsClassifier(n_neighbors=78) 
model.fit(X_train,y_train)
prediction=model.predict(X_test)
print('The accuracy of the KNN is',metrics.accuracy_score(prediction,y_test))

import pickle

# menyimpan model menggunakan library pickle
filename = 'model.pkl'
pickle.dump(model, open(filename, 'wb'))